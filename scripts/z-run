#!/dev/null




::// docs / ...
::// watch / ...
::// tls / ...




&&== env-path _RUST_SOURCES ./sources
&&== env-path _RUST_TARGET ./.target
&&== env-path _EXAMPLES ./examples




<< debug / build / lib
	#! <bash+>
	Z_expect_no_arguments
	Z_zexec ':: cargo / run' build --lib
!!

<< debug / run / example
	#! <bash+>
	Z_zexec ':: cargo / run' run --bin example -- "${@}"
!!

<< docs / crate / internals / build
	#! <bash+>
	Z_expect_no_arguments
	Z_zexec ':: cargo / run' doc --lib --no-deps --document-private-items
!!

<< docs / crate / exports / build
	#! <bash+>
	Z_expect_no_arguments
	Z_zexec ':: cargo / run' doc --lib --no-deps
!!

<< docs / crate / dependencies / build
	#! <bash+>
	Z_expect_no_arguments
	Z_zexec ':: cargo / run' doc --lib
!!

<< docs / crate / open
	#! <bash+>
	Z_expect_no_arguments
	exec -- x-www guest:rust-docs open "file:${_RUST_TARGET}/doc/hyper_simple_server/index.html"
!!




<<== __ / generate
	#! <template>
	
	{{ $_watch_actions := array }}
	{{ $_watch_actions = array_append $_watch_actions "debug / build / lib" "debug / run / example" }}
	{{ $_watch_actions = array_append $_watch_actions "docs / crate / internals / build" "docs / crate / exports / build" "docs / crate / dependencies / build" }}
	
	{{ range $_, $_action := $_watch_actions }}
	<< watch / {{ $_action }}
		#! <bash+>
		Z_expect_no_arguments
		Z_zexec ':: watch / run' ':: '{{ $_action | shell_quote }}
	!!
	{{ end }}
!!




--<< cargo / run
	#! <bash+>
	
	Z_enforce 0xd425e0f4 'expected command!' test "${#}" -ge 1
	
	_command="${1}"
	shift -- 1
	
	_arguments=()
	
	case "${_command}" in
		( build | run | doc )
			_arguments+=(
					--manifest-path "${_RUST_SOURCES}/Cargo.toml" \
					--target-dir "${_RUST_TARGET}" \
				)
		;;
		( * )
			Z_panic 0x510d7e97 'invalid command `%s`!' "${_command}"
		;;
	esac
	
	exec -- \
		nice -n 19 -- \
	cargo \
			"${_command}" \
			"${_arguments[@]}" \
			"${@}" \
	#
!!




--<< watch / run
	#! <bash+>
	exec -- \
		nodaemon \
	watchexec \
			\
			--watch "${_RUST_SOURCES}" \
			\
			--restart \
			--debounce 100 \
			\
			--no-shell \
			--no-ignore \
			--no-vcs-ignore \
			--no-default-ignore \
			\
			-- \
			\
		nodaemon \
	"${ZRUN[@]}" \
			':: watch / delegate' \
			"${@}"
	#
!!


--<< watch / delegate
	#! <bash+>
	Z_log_cut
	Z_zexec "${@}"
!!




<< tls / generate / all
	#! <bash+>
	
	Z_expect_no_arguments
	
	Z_zspawn ':: tls / generate / self-signed'
	Z_zspawn ':: tls / generate / testing / ca'
	Z_zspawn ':: tls / generate / testing / server'
	Z_zspawn ':: tls / generate / testing / client'
!!




<< tls / generate / self-signed
	#! <bash+>
	
	Z_expect_no_arguments
	
	for _type in rsa:sha256 ed25519:sha512 ; do
		_hash="${_type#*:}"
		_type="${_type%:*}"
		
		certtool \
				--generate-privkey \
				--key-type "${_type}" \
				--sec-param medium \
				--pkcs8 \
				--pkcs-cipher aes-128 \
				--password '' \
				--outfile "${_EXAMPLES}/tls/self-signed--${_type}--private-key.pem" \
				--no-text \
			2> /dev/null \
		#
		
		certtool \
				--generate-self-signed \
				--hash "${_hash}" \
				--pkcs8 \
				--password '' \
				--load-privkey "${_EXAMPLES}/tls/self-signed--${_type}--private-key.pem" \
				--outfile "${_EXAMPLES}/tls/self-signed--${_type}--certificate.pem" \
				--template "${_EXAMPLES}/tls/self-signed--any--certificate.conf" \
				--no-text \
			2> /dev/null \
		#
		
		cat -- \
				"${_EXAMPLES}/tls/self-signed--${_type}--certificate.pem" \
				"${_EXAMPLES}/tls/self-signed--${_type}--private-key.pem" \
			>| "${_EXAMPLES}/tls/self-signed--${_type}--bundle.pem" \
		#
		
	done
!!




<< tls / generate / testing / ca
	#! <bash+>
	
	Z_expect_no_arguments
	
	for _type in rsa:sha256 ed25519:sha512 ; do
		_hash="${_type#*:}"
		_type="${_type%:*}"
		
		certtool \
				--generate-privkey \
				--key-type "${_type}" \
				--sec-param medium \
				--pkcs8 \
				--pkcs-cipher aes-128 \
				--password '' \
				--outfile "${_EXAMPLES}/tls/testing--ca--${_type}--private-key.pem" \
				--no-text \
			2> /dev/null \
		#
		
		certtool \
				--generate-self-signed \
				--hash "${_hash}" \
				--pkcs8 \
				--password '' \
				--load-privkey "${_EXAMPLES}/tls/testing--ca--${_type}--private-key.pem" \
				--outfile "${_EXAMPLES}/tls/testing--ca--${_type}--certificate.pem" \
				--template "${_EXAMPLES}/tls/testing--ca--any--certificate.conf" \
				--no-text \
			2> /dev/null \
		#
	done
	
	cat -- \
			"${_EXAMPLES}/tls/testing--ca--rsa--certificate.pem" \
			"${_EXAMPLES}/tls/testing--ca--ed25519--certificate.pem" \
		>| "${_EXAMPLES}/tls/testing--ca.pem" \
	#
!!


<< tls / generate / testing / server
	#! <bash+>
	
	Z_expect_no_arguments
	
	for _type in rsa:sha256 ed25519:sha512 ; do
		_hash="${_type#*:}"
		_type="${_type%:*}"
		
		certtool \
				--generate-privkey \
				--key-type "${_type}" \
				--sec-param medium \
				--pkcs8 \
				--pkcs-cipher aes-128 \
				--password '' \
				--outfile "${_EXAMPLES}/tls/testing--server--${_type}--private-key.pem" \
				--no-text \
		2> /dev/null \
		#
		
		certtool \
				--generate-request \
				--hash "${_hash}" \
				--pkcs8 \
				--password '' \
				--load-privkey "${_EXAMPLES}/tls/testing--server--${_type}--private-key.pem" \
				--outfile "${_EXAMPLES}/tls/testing--server--${_type}--request.pem" \
				--template "${_EXAMPLES}/tls/testing--server--any--certificate.conf" \
				--no-text \
			2> /dev/null \
		#
		
		certtool \
				--generate-certificate \
				--hash "${_hash}" \
				--pkcs8 \
				--password '' \
				--load-ca-privkey "${_EXAMPLES}/tls/testing--ca--${_type}--private-key.pem" \
				--load-ca-certificate "${_EXAMPLES}/tls/testing--ca--${_type}--certificate.pem" \
				--load-request "${_EXAMPLES}/tls/testing--server--${_type}--request.pem" \
				--outfile "${_EXAMPLES}/tls/testing--server--${_type}--certificate.pem" \
				--template "${_EXAMPLES}/tls/testing--server--any--certificate.conf" \
				--no-text \
			2> /dev/null \
		#
		
		cat -- \
				"${_EXAMPLES}/tls/testing--server--${_type}--certificate.pem" \
				"${_EXAMPLES}/tls/testing--ca--${_type}--certificate.pem" \
				"${_EXAMPLES}/tls/testing--server--${_type}--private-key.pem" \
			>| "${_EXAMPLES}/tls/testing--server--${_type}--bundle.pem" \
		#
		
	done
!!


<< tls / generate / testing / client
	#! <bash+>
	
	Z_expect_no_arguments
	
	for _type in rsa:sha256 ed25519:sha512 ; do
		_hash="${_type#*:}"
		_type="${_type%:*}"
		
		certtool \
				--generate-privkey \
				--key-type "${_type}" \
				--sec-param medium \
				--pkcs8 \
				--pkcs-cipher aes-128 \
				--password '' \
				--outfile "${_EXAMPLES}/tls/testing--client--${_type}--private-key.pem" \
				--no-text \
			2> /dev/null \
		#
		
		certtool \
				--generate-request \
				--hash "${_hash}" \
				--pkcs8 \
				--password '' \
				--load-privkey "${_EXAMPLES}/tls/testing--client--${_type}--private-key.pem" \
				--outfile "${_EXAMPLES}/tls/testing--client--${_type}--request.pem" \
				--template "${_EXAMPLES}/tls/testing--client--any--certificate.conf" \
				--no-text \
			2> /dev/null \
		#
		
		certtool \
				--generate-certificate \
				--hash "${_hash}" \
				--pkcs8 \
				--password '' \
				--load-ca-privkey "${_EXAMPLES}/tls/testing--ca--${_type}--private-key.pem" \
				--load-ca-certificate "${_EXAMPLES}/tls/testing--ca--${_type}--certificate.pem" \
				--load-request "${_EXAMPLES}/tls/testing--client--${_type}--request.pem" \
				--outfile "${_EXAMPLES}/tls/testing--client--${_type}--certificate.pem" \
				--template "${_EXAMPLES}/tls/testing--client--any--certificate.conf" \
				--no-text \
			2> /dev/null \
		#
		
		cat -- \
				"${_EXAMPLES}/tls/testing--client--${_type}--certificate.pem" \
				"${_EXAMPLES}/tls/testing--ca--${_type}--certificate.pem" \
				"${_EXAMPLES}/tls/testing--client--${_type}--private-key.pem" \
			>| "${_EXAMPLES}/tls/testing--client--${_type}--bundle.pem" \
		#
		
	done
!!

